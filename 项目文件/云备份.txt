云备份项目：
【项目简介】
包含一个Linux下的服务器端，以及一个windows下的客户端
Windows下的客户端对指定的一个文件夹进行监控，将修改/新建的文件自动上传备份到服务器上，然后可以通过浏览器查看/下载这个文件信息
Linux下的服务端，会对备份的文件进行热点判断，非热点文件进行压缩存储，提高磁盘利用率

【项目设计】
概要设计：
云备份：服务端(1.通过网络通信实现文件上传备份，2.服务端提供浏览器浏览下载功能，3.对非热点文件进行压缩存储)、客户端(1.检测文件是否需要备份，2.网络通信上传备份功能)

[服务端模块]
网络通信模块:实现文件的上传/浏览备份功能(服务端1、2点)
文件压缩模块:检测非热点文件，实现压缩功能(服务端3点)
备份的文件数据管理模块:记录上传了哪些文件，是否被压缩了，压缩后的存储路径名

[客户端模块]
需备份文件检测模块:检测哪些文件需要备份(客户端1点)
网络通信模块:实现文件上传备份(客户端2点)
数据管理模块:管理指定目录下的文件信息(etag--最后一次修改时间，文件大小)

具体的实现模块：
[服务端]
网络通信模块:1.响应客户端的文件上传请求，2.响应客户端的文件列表请求，3.响应客户端的文件下载请求
文件压缩模块:检测非热点文件，实现压缩功能
备份的文件数据管理模块:用户备份的文件信息管理，记录上传了哪些文件，是否被压缩了，压缩后的存储路径名

[客户端]
需备份文件检测模块:检测目录下有哪些文件，然后计算出etag，与原有数据匹配
网络通信模块:搭建客户端进行文件上传备份
数据管理模块:管理指定目录下的文件信息(etag--最后一次修改时间，文件大小)


【业务流程设计】
[客户端]
1.读取文件备份信息记录--包含每个文件的具体最后一次修改时间-大小-etag信息
2.文件检测模块，对指定目录下的所有文件逐个获取etag信息，判断etag是否匹配，不匹配则需要进行备份
3.获取到需要备份的文件列表逐个进行文件备份--向服务器发送文件上传请求
4.文件上传备份后，更新数据管理模块中的文件备份信息(防止每次都需要备份)

浏览器客户端：
1.获取文件列表--向服务器发送文件列表获取请求
2.下载指定文件--向服务器发送文件下载请求

服务端：
1、搭建服务器，等待客户端连接上来，针对客户端的请求进行处理
  1.文件上传请求--对文件实现数据备份，然后在数据管理模块中进行记录
  2.文件的列表请求--组织客户端上传过的文件名称成为一个html网页信息响应给客户端
  3.文件的下载请求--文件未被压缩，则直接响应文件数据/文件已经被压缩，解压文件，响应解压后的数据
2、启动非热点文件压缩模块
  1.每隔一段时间检测文件的最后一次访问时间，通过这个时间，与一个基准值判断当前文件是否为热点文件
  2.非热点文件，则将这个文件压缩存储，并且更新数据模块中的数据信息

网络通信接口的设计
客户端向服务端发送文件上传请求，到底发送的是什么样的请求数据以及服务端会有一个什么样的响应数据？
1.在这个项目中，我们的网络通信在应用层使用HTTP协议实现数据传输
客户端向服务端发送什么样的数据，服务端最终会得到什么样的响应数据
HTTP协议格式:首行，头部，空行，正文

文件上传请求数据:
  PUT/filename HTTP/1.1\r\n
  Content-Length:上传的文件大小\r\n
  \r\n
  正文:文件数据

  响应:HTTP/1.1 200 OK\r\n
       Content-Length:0\r\n

文件列表请求:
  GET/list HTTP/1.1\r\n
  Content-Length:0\r\n

  响应:HTTP/1.1 200 OK\r\n
       Content-Length:最终组织的html长度
       Content-Type:text/html\r\n
       \r\n
       正文:具体组织出来的html文件列表页面数据

文件下载请求：
  GET/filename HTTP/1.1\r\n
  Content-Lrngth:0\r\n

  响应:HTTP/1.1 200 OK\r\n
       Content-Length:文件大小\r\n
       \r\n
       正文:文件数据

代码模块的设计:
服务端:
  [非热点文件的压缩解压缩模块]--基于zlib封装实现非热点文件的压缩/解压缩
    1.文件是否是热点文件的判断--文件属性中有一个属性--最后一次访问时间--若当前时间减去文件最后一次访问时间>基准值-非热点
    2.文件的压缩功能(将源文件进行压缩存储，保留压缩文件，删除源文件)-->更新数据管理
    3.文件的解压缩功能(先将文件解压缩，得到源文件，删除压缩的文件)
      class CompressUtil//这是一个工具类，向外提供热点文件的判断以及文件的压缩解压缩功能即可
      {
      public:
	static bool FilelsHot(const std::string &filename);//判断文件是否为热点文件
        static bool Compress(const std::string &src_name,const str::string &dst_name);//压缩(源文件名称，压缩包名称)
	static bool UnCompress(const std::string &src_name,const str::string &dst_name);//解压缩(压缩包名称，源文件名称)
      };

      模块类，向外提供一个模块的完整流程功能
      class NonHotCompress//每隔一段时间检测哪些未压缩文件是非热点文件，然后进行压缩
      {
      public:
	bool FileIsHot(const std::string &filename);//判断文件是否是一个热点文件
	bool Start(){...循环每隔一段时间，1.获取未压缩文件列表，2.逐个判断是否是热点文件，3.若是非热点文件，则压缩，4.更新数据}
      private:
	std::string _gz_dir;//压缩文件的存放路径
      }

  [数据管理模块]--基于STL容器-unordered_map实现简单的数据管理(有时间可以使用轻量级数据库sqlite实现)
    1.数据管理模块要管理哪些数据(源文件名称，压缩包名称)
      class DataManage
      {
      public:
        bool Exists(const std::string &filename);//判断文件是否存在
        bool IsCompressed(const std::string &Filename);//判断文件是否已经压缩
	bool Non_Compressed(std::vector<std::string> *list);//通过list返回当前没有被压缩的文件名称列表-压缩模块就是拿着这个列表逐一判断
        bool Insert(const std::string &src,const std::string &dst);//插入文件数据对于备份两个名称都是源文件，对于压缩src-源文件，dst-压缩包
        bool GetList(std::vector<std::string> *list);//获取所有文件名称
        bool Storage();//数据改变时将数据持久化存储到文件中
        bool Load();//服务端启动时从文件中加载所有文件信息到内存中
      private:
        std::string _back_file;//这个文件用于持久化存储文件数据信息
        std::unordered_map<std::string,std::string>_file_list;//这个是内存中数据管理
        pthread_rwlock_t_rwlock;//使用读写锁保护_file_list的操作--读共享，写互斥
      }
接受上传的文件--网络通信模块-(将备份的文件信息插入新信息)-备份的文件数据管理-(取出未压缩文件列表)-非热点压缩模块，逐个判断是否需要压缩--若压缩了某个文件，需要更新数据

备份的文件数据管理--1.启动时加载已有数据，2.数据改动时持久化存储


  [网络通信模块]使用HTTP协议--基于httplib(tcp服务器)封装搭建http服务器
    功能:1.文件上传，2.列表获取，3.文件下载
    1.搭建http服务器--使用httplib库完成--这个库中提供简单的接口实现搭建http服务器/客户端
    2.只需要通过httplib提供的接口告诉这个服务器针对什么请求，回调什么函数实现业务功能就可以了
    3.我们只需要完成这个三个业务功能接口就可以了
      1.文件上传请求处理接口
      2.文件列表请求处理接口
      3.文件下载请求处理接口

    httplib-服务器:线程池中的线程首先接收http数据，然后进行解析，解析后根据请求方法与请求的资源路径，去请求路由表，查看是否有对应的回调函数，若有，则使用回调函数进行业务处理，这个回调函数是我们自己写的传入到这张表中
      srv.Get(string,function)(资源路径，回调函数)；("*list",helloworld)
    针对/list这个资源的GET请求方法，应该使用helloworld这个函数进行业务处理
      void helloworld(const httplib::Request &req,httplib::Response &rsp)
      {
	//req-就是人家解析了http请求数据之后实例化的一个请求对象，包含所有解析出来的数据
	//包含(method-请求方法，path-资源路径，param-查询字符串，headers-头部信息，body-正文)
	//我们就是根据req里边的信息，来进行具体的业务处理 get/list
	//业务处理完毕之后，只需要向rsp中填充数据即可(status-响应状态码，headers-头部，body-正文)
      }//这个函数回调完毕，httplib就获取了填充完毕的rsp，根据rsp组织http响应数据发送给客户端


回调函数有两个参数：
一个是req--Request，一个是rsp-Response

req是传入的请求数据

rsp是需要让我们进行业务处理后填充的响应数据

http响应格式：
  响应首行：协议版本 响应状态码  描述
  响应头部
  正文

[网络通信模块]：负责响应客户端的文件上传/列表/下载请求
class HttpServer
{
  public:
    bool Start()://开始搭建HTTP服务器，进行业务处理
  private:
    static void FileUpLoad(const httplib::Request &req,httplib::Response &rsp);//文件上传请求的回调处理函数
    static void FileList(const httplib::Request &req,httplib::Response &rsp);//文件列表请求的回调函数
    static void FileDownLoad(const httplib::Request &req,httplib::Response &rsp);//文件下载请求的回调函数
  private:
    std::string _file_dir;//上传文件的存放路径
    httplib::Server _server;//搭建http服务器的对象
}

文件压缩所用接口：
gzFile gzopen(const char *path,const char *mode)
path：要打开的gzip文件名称
mode：rb-读/wb-写
返回值：返回一个gzFile指针，失败返回NULL

int gzread(gzFile file,voidp buf,unsigned len)--从gzip文件中读取出解压之后的数据
file：gzopen返回的操作句柄
buf：一块缓冲区，用于存放解压后的数据
len：buf缓冲区的大小
返回值：返回读取到的解压后的数据大小，失败返回-1

int gzwrite(gzFile file,voidp buf,unsigned len)--将buf中的数据压缩后写入文件中
file：gzopen返回的操作句柄
buf：还未压缩的数据
len：buf中数据的大小
成功：返回实际压缩的数据大小，失败返回0；

int gzclose(gzFile file)--关闭gzip文件，释放资源

每次gzwrite返回值加起来才是实际压缩的数据长度，返回值只是每次压缩的数据长度

客户端:

  [数据管理模块]初始化加载/持久化存储/获取所有列表/获取未压缩列表/判断是否已压缩/判断文件是否存在
  管理两个数据，<文件名，文件etag信息>

  [目录监控模块]监控指定目录，获取目录下的所有文件信息，判断文件是否需要备份，每个文件都有一个etag(文件大小-最后一次修改时间)
  
  读取目录下所有文件，每个文件都计算一下文件etag信息，通过文件名到数据管理对象中查找原有etag信息。
  如果没有这个信息，则表示这是一个新文件，需要进行备份
  如果有原有etag信息，则对新计算的etag和原有的etag进行对比，不相等则认为修改过，需要备份；否则不需要备份

  [文件备份模块]通过目录监控模块获取到需要备份的文件列表，搭建http客户端逐个上传文件即可
  上传完毕后，更新数据对象的etag信息

  1.程序初始化阶段，初始化数据管理模块对象，加载原有数据信息
  2.通过目录监控模块获取到需要备份的文件列表
  3.根据需要备份文件列表逐个上传文件
  4.上传完每一个文件都需要更新数据信息

[客户端数据管理模快]
功能：1.项目了监控模块提供原有etag信息，2.文件备份模块备份文件成功后插入/更新数据etag信息
class DataManage
{
  public:
    DataManage(const std::string &filename):_store_file(filename){}
    bool Insert(const std::string &key,const std::string &val);//备份文件之后插入/更新数据信息
    bool GetEtag(const std::string &key, std::string *val);//获取文件原有etag信息进行比对
    bool InitLoad();//初始化加载原有数据
    bool Storage();//每次更新数据之后，持久化存储
  private:
    std::string _store_file;//数据的持久化文件名称
    std::unordered_map<std::string, std::string> _backup_list;//已经备份过的文件信息列表
}


[目录监控模块]
class DirListen()//能够检测到有哪些文件需要进行备份
{
  public:
    bool GetBackUpFileList(std::vector<std::string> *list);//获取需要备份的文件列表--浏览目录下所有文件，逐个获取etag然后进行对比
    static bool GetEtag(const std::string &filename,std::string *etag);//计算一个文件的etag信息
  private:
    std::string _listen_dir;//监控模块要监控的目录名称
}

[文件备份模块]：获取到需要备份的文件列表，逐个将文件上传备份到服务器
  这个模块是一个流程模块，在主控流程中就可以完成
  这个模块中的网络通信，可以简单的通过httplib来搭建http客户端


httplib::Client(const std::string &srv_ip,uint16_t srv_port);

httplib::Response *rsp = client.Get(path);向服务端发送path的GET请求
  1.搭建tcp客户端
  2.根据GEt请求方法以及资源路径path，组织http请求数据
    GET/path HTTP/1.1
    Content-Length:0
  3.发送请求等待响应--拿到回复的http响应数据进行解析得到一个Response对象，返回指针
    状态码，头部信息，正文
  4.根据响应的信息，如何处理就是接下来程序中的事情


  bool Start()
  {
    初始化数据管理对象
    std::vector<std::string> list;
    DirListen.GetBackUpList(&list);//获取到需要备份的文件列表
    for(filename:list)
    {
      std::string body;
      FileUtil::Read(filename,&body);
      //httplib客户端文件上传
      更新数据
    }
 
  }


文件上传接口：
 PUT/filename HTTP/1.1
 Content-Length:正文长度

 正文：文件数据
 httplib::Client client(服务器地址，端口);
 client.Put(path,body,content_type);(请求的路径，正文，正文类型)--向服务端发送PUT请求

  1.组织http请求数据
  2.根据实例化对象传入的服务端地址信息搭建tcp客户端发送请求
  3.等待服务端响应，接受到响应数据，进行解析，得到一个Response对象
  PUT path HTTP/1.1
  Content-Type:content_type
  Cintent-Length:body的长度

  正文：body

  在程序中client。Put()之后得到Response，根据Response中的状态码判断文件上传是否成功
  成功：更新备份的文件信息
  失败：重新上传文件

在HTTP协议中断点续传涉及到那几个头部信息:
下载响应头部:
  Accept-Ranges:--服务器告诉服务端自己支持资源传输范围的定义--告诉客户端自己支持断点续传
  Accept-Ranges:bytes
  Content-Range:bytes 200-1000/*
  ETag--用于向客户端发送一个文件唯一性的信息；若客户端断点续传，需要将这个信息重新传递回来，判断文件是否改变，然后决定是完整的重新下载，，，，

请求头部:
  Range--客户端告诉服务器，自己想要的数据资源范围
  Range:bytes=200-1000 想要文件第200到1000字节的数据/  bytes=200- 想要文件从第200字节开始到结束
  服务端收到Range，解析得到数据从第200字节开始，长度801个字节，则打开文件跳转读写位置到200，然后读取801字节数据响应
  文件资源的部分响应状态码是206而不是200;200是完整下载的意思

断点续传有一个关键信息:服务器上的文件没有修改过

收到206则表示收到的数据是范围性数据--断点续传
收到200则表示收到的是完整的文件数据--重新下载